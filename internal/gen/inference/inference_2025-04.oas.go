// Package inference provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package inference

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ErrorResponseErrorCode.
const (
	ABORTED            ErrorResponseErrorCode = "ABORTED"
	ALREADYEXISTS      ErrorResponseErrorCode = "ALREADY_EXISTS"
	DATALOSS           ErrorResponseErrorCode = "DATA_LOSS"
	DEADLINEEXCEEDED   ErrorResponseErrorCode = "DEADLINE_EXCEEDED"
	FAILEDPRECONDITION ErrorResponseErrorCode = "FAILED_PRECONDITION"
	FORBIDDEN          ErrorResponseErrorCode = "FORBIDDEN"
	INTERNAL           ErrorResponseErrorCode = "INTERNAL"
	INVALIDARGUMENT    ErrorResponseErrorCode = "INVALID_ARGUMENT"
	NOTFOUND           ErrorResponseErrorCode = "NOT_FOUND"
	OK                 ErrorResponseErrorCode = "OK"
	OUTOFRANGE         ErrorResponseErrorCode = "OUT_OF_RANGE"
	PERMISSIONDENIED   ErrorResponseErrorCode = "PERMISSION_DENIED"
	QUOTAEXCEEDED      ErrorResponseErrorCode = "QUOTA_EXCEEDED"
	RESOURCEEXHAUSTED  ErrorResponseErrorCode = "RESOURCE_EXHAUSTED"
	UNAUTHENTICATED    ErrorResponseErrorCode = "UNAUTHENTICATED"
	UNAVAILABLE        ErrorResponseErrorCode = "UNAVAILABLE"
	UNIMPLEMENTED      ErrorResponseErrorCode = "UNIMPLEMENTED"
	UNKNOWN            ErrorResponseErrorCode = "UNKNOWN"
)

// Defines values for ModelInfoMetric.
const (
	Cosine     ModelInfoMetric = "cosine"
	Dotproduct ModelInfoMetric = "dotproduct"
	Euclidean  ModelInfoMetric = "euclidean"
)

// DenseEmbedding A dense embedding of a single input
type DenseEmbedding struct {
	// Values The dense embedding values.
	Values []float32 `json:"values"`

	// VectorType Indicates whether this is a 'dense' or 'sparse' embedding.
	VectorType VectorType `json:"vector_type"`
}

// Document Document for reranking
type Document map[string]interface{}

// EmbedRequest defines model for EmbedRequest.
type EmbedRequest struct {
	// Inputs List of inputs to generate embeddings for.
	Inputs []struct {
		Text *string `json:"text,omitempty"`
	} `json:"inputs"`

	// Model The [model](https://docs.pinecone.io/guides/index-data/create-an-index#embedding-models) to use for embedding generation.
	Model string `json:"model"`

	// Parameters Additional model-specific parameters. Refer to the [model guide](https://docs.pinecone.io/guides/index-data/create-an-index#embedding-models) for available model parameters.
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// Embedding Embedding of a single input
type Embedding struct {
	union json.RawMessage
}

// EmbeddingsList Embeddings generated for the input.
type EmbeddingsList struct {
	// Data The embeddings generated for the inputs.
	Data []Embedding `json:"data"`

	// Model The model used to generate the embeddings
	Model string `json:"model"`

	// Usage Usage statistics for the model inference.
	Usage struct {
		// TotalTokens Total number of tokens consumed across all inputs.
		TotalTokens *int32 `json:"total_tokens,omitempty"`
	} `json:"usage"`

	// VectorType Indicates whether the response data contains 'dense' or 'sparse' embeddings.
	VectorType string `json:"vector_type"`
}

// ErrorResponse The response shape used for all error responses.
type ErrorResponse struct {
	// Error Detailed information about the error that occurred.
	Error struct {
		Code ErrorResponseErrorCode `json:"code"`

		// Details Additional information about the error. This field is not guaranteed to be present.
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error"`

	// Status The HTTP status code of the error.
	Status int `json:"status"`
}

// ErrorResponseErrorCode defines model for ErrorResponse.Error.Code.
type ErrorResponseErrorCode string

// ModelInfo Represents the model configuration including model type, supported parameters, and other model details.
type ModelInfo struct {
	// DefaultDimension The default embedding model dimension (applies to dense embedding models only).
	DefaultDimension *int32 `json:"default_dimension,omitempty"`

	// MaxBatchSize The maximum batch size (number of sequences) supported by the model.
	MaxBatchSize *int32 `json:"max_batch_size,omitempty"`

	// MaxSequenceLength The maximum tokens per sequence supported by the model.
	MaxSequenceLength *int32 `json:"max_sequence_length,omitempty"`

	// Modality The modality of the model (e.g. 'text').
	Modality *string `json:"modality,omitempty"`

	// Model The name of the model.
	Model string `json:"model"`

	// ProviderName The name of the provider of the model.
	ProviderName *string `json:"provider_name,omitempty"`

	// ShortDescription A summary of the model.
	ShortDescription string `json:"short_description"`

	// SupportedDimensions The list of supported dimensions for the model (applies to dense embedding models only).
	SupportedDimensions *[]int32 `json:"supported_dimensions,omitempty"`

	// SupportedMetrics The distance metrics supported by the model for similarity search.
	SupportedMetrics    *ModelInfoSupportedMetrics    `json:"supported_metrics,omitempty"`
	SupportedParameters []ModelInfoSupportedParameter `json:"supported_parameters"`

	// Type The type of model (e.g. 'embed' or 'rerank').
	Type string `json:"type"`

	// VectorType Whether the embedding model produces 'dense' or 'sparse' embeddings.
	VectorType *string `json:"vector_type,omitempty"`
}

// ModelInfoList The list of available models.
type ModelInfoList struct {
	Models *[]ModelInfo `json:"models,omitempty"`
}

// ModelInfoMetric A distance metric that the embedding model supports for similarity searches.
type ModelInfoMetric string

// ModelInfoSupportedMetrics The distance metrics supported by the model for similarity search.
type ModelInfoSupportedMetrics = []ModelInfoMetric

// ModelInfoSupportedParameter Describes a parameter supported by the model, including parameter value constraints.
type ModelInfoSupportedParameter struct {
	// AllowedValues The allowed parameter values when the type is 'one_of'.
	AllowedValues *[]ModelInfoSupportedParameter_AllowedValues_Item `json:"allowed_values,omitempty"`

	// Default The default value for the parameter when a parameter is optional.
	Default *ModelInfoSupportedParameter_Default `json:"default,omitempty"`

	// Max The maximum allowed value (inclusive) when the type is 'numeric_range'.
	Max *float32 `json:"max,omitempty"`

	// Min The minimum allowed value (inclusive) when the type is 'numeric_range'.
	Min *float32 `json:"min,omitempty"`

	// Parameter The name of the parameter.
	Parameter string `json:"parameter"`

	// Required Whether the parameter is required (true) or optional (false).
	Required bool `json:"required"`

	// Type The parameter type e.g. 'one_of', 'numeric_range', or 'any'.
	//
	// If the type is 'one_of', then 'allowed_values' will be set, and the value specified must be one of the allowed values. 'one_of' is only compatible with value_type 'string' or 'integer'.
	//
	// If 'numeric_range', then 'min' and 'max' will be set, then the value specified must adhere to the value_type and must fall within the `[min, max]` range (inclusive).
	//
	// If 'any' then any value is allowed, as long as it adheres to the value_type.
	Type string `json:"type"`

	// ValueType The type of value the parameter accepts, e.g. 'string', 'integer', 'float', or 'boolean'.
	ValueType string `json:"value_type"`
}

// ModelInfoSupportedParameterAllowedValues0 defines model for .
type ModelInfoSupportedParameterAllowedValues0 = string

// ModelInfoSupportedParameterAllowedValues1 defines model for .
type ModelInfoSupportedParameterAllowedValues1 = int

// ModelInfoSupportedParameter_AllowedValues_Item defines model for ModelInfoSupportedParameter.allowed_values.Item.
type ModelInfoSupportedParameter_AllowedValues_Item struct {
	union json.RawMessage
}

// ModelInfoSupportedParameterDefault0 defines model for .
type ModelInfoSupportedParameterDefault0 = string

// ModelInfoSupportedParameterDefault1 defines model for .
type ModelInfoSupportedParameterDefault1 = int32

// ModelInfoSupportedParameterDefault2 defines model for .
type ModelInfoSupportedParameterDefault2 = float32

// ModelInfoSupportedParameterDefault3 defines model for .
type ModelInfoSupportedParameterDefault3 = bool

// ModelInfoSupportedParameter_Default The default value for the parameter when a parameter is optional.
type ModelInfoSupportedParameter_Default struct {
	union json.RawMessage
}

// RankedDocument A ranked document with a relevance score and an index position.
type RankedDocument struct {
	// Document Document for reranking
	Document *Document `json:"document,omitempty"`

	// Index The index position of the document from the original request.
	Index int `json:"index"`

	// Score The relevance of the document to the query, normalized between 0 and 1, with scores closer to 1 indicating higher relevance.
	Score float32 `json:"score"`
}

// RerankRequest defines model for RerankRequest.
type RerankRequest struct {
	// Documents The documents to rerank.
	Documents []Document `json:"documents"`

	// Model The [model](https://docs.pinecone.io/guides/search/rerank-results#reranking-models) to use for reranking.
	Model string `json:"model"`

	// Parameters Additional model-specific parameters. Refer to the [model guide](https://docs.pinecone.io/guides/search/rerank-results#reranking-models) for available model parameters.
	Parameters *map[string]interface{} `json:"parameters,omitempty"`

	// Query The query to rerank documents against.
	Query string `json:"query"`

	// RankFields The field(s) to consider for reranking. If not provided, the default is `["text"]`.
	//
	// The number of fields supported is [model-specific](https://docs.pinecone.io/guides/search/rerank-results#reranking-models).
	RankFields *[]string `json:"rank_fields,omitempty"`

	// ReturnDocuments Whether to return the documents in the response.
	ReturnDocuments *bool `json:"return_documents,omitempty"`

	// TopN The number of results to return sorted by relevance. Defaults to the number of inputs.
	TopN *int `json:"top_n,omitempty"`
}

// RerankResult The result of a reranking request.
type RerankResult struct {
	// Data The reranked documents.
	Data []RankedDocument `json:"data"`

	// Model The model used to rerank documents.
	Model string `json:"model"`

	// Usage Usage statistics for the model inference.
	Usage struct {
		// RerankUnits The number of rerank units consumed by this operation.
		RerankUnits *int32 `json:"rerank_units,omitempty"`
	} `json:"usage"`
}

// SparseEmbedding A sparse embedding of a single input
type SparseEmbedding struct {
	// SparseIndices The sparse embedding indices.
	SparseIndices []int64 `json:"sparse_indices"`

	// SparseTokens The normalized tokens used to create the sparse embedding.
	SparseTokens *[]string `json:"sparse_tokens,omitempty"`

	// SparseValues The sparse embedding values.
	SparseValues []float32 `json:"sparse_values"`

	// VectorType Indicates whether this is a 'dense' or 'sparse' embedding.
	VectorType VectorType `json:"vector_type"`
}

// VectorType Indicates whether this is a 'dense' or 'sparse' embedding.
type VectorType = string

// ListModelsParams defines parameters for ListModels.
type ListModelsParams struct {
	// Type Filter models by type ('embed' or 'rerank').
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// VectorType Filter embedding models by vector type ('dense' or 'sparse'). Only relevant when `type=embed`.
	VectorType *string `form:"vector_type,omitempty" json:"vector_type,omitempty"`
}

// EmbedJSONRequestBody defines body for Embed for application/json ContentType.
type EmbedJSONRequestBody = EmbedRequest

// RerankJSONRequestBody defines body for Rerank for application/json ContentType.
type RerankJSONRequestBody = RerankRequest

// AsDenseEmbedding returns the union data inside the Embedding as a DenseEmbedding
func (t Embedding) AsDenseEmbedding() (DenseEmbedding, error) {
	var body DenseEmbedding
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDenseEmbedding overwrites any union data inside the Embedding as the provided DenseEmbedding
func (t *Embedding) FromDenseEmbedding(v DenseEmbedding) error {
	v.VectorType = "dense"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDenseEmbedding performs a merge with any union data inside the Embedding, using the provided DenseEmbedding
func (t *Embedding) MergeDenseEmbedding(v DenseEmbedding) error {
	v.VectorType = "dense"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSparseEmbedding returns the union data inside the Embedding as a SparseEmbedding
func (t Embedding) AsSparseEmbedding() (SparseEmbedding, error) {
	var body SparseEmbedding
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSparseEmbedding overwrites any union data inside the Embedding as the provided SparseEmbedding
func (t *Embedding) FromSparseEmbedding(v SparseEmbedding) error {
	v.VectorType = "sparse"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSparseEmbedding performs a merge with any union data inside the Embedding, using the provided SparseEmbedding
func (t *Embedding) MergeSparseEmbedding(v SparseEmbedding) error {
	v.VectorType = "sparse"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Embedding) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"vector_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Embedding) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "dense":
		return t.AsDenseEmbedding()
	case "sparse":
		return t.AsSparseEmbedding()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Embedding) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Embedding) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModelInfoSupportedParameterAllowedValues0 returns the union data inside the ModelInfoSupportedParameter_AllowedValues_Item as a ModelInfoSupportedParameterAllowedValues0
func (t ModelInfoSupportedParameter_AllowedValues_Item) AsModelInfoSupportedParameterAllowedValues0() (ModelInfoSupportedParameterAllowedValues0, error) {
	var body ModelInfoSupportedParameterAllowedValues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterAllowedValues0 overwrites any union data inside the ModelInfoSupportedParameter_AllowedValues_Item as the provided ModelInfoSupportedParameterAllowedValues0
func (t *ModelInfoSupportedParameter_AllowedValues_Item) FromModelInfoSupportedParameterAllowedValues0(v ModelInfoSupportedParameterAllowedValues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterAllowedValues0 performs a merge with any union data inside the ModelInfoSupportedParameter_AllowedValues_Item, using the provided ModelInfoSupportedParameterAllowedValues0
func (t *ModelInfoSupportedParameter_AllowedValues_Item) MergeModelInfoSupportedParameterAllowedValues0(v ModelInfoSupportedParameterAllowedValues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelInfoSupportedParameterAllowedValues1 returns the union data inside the ModelInfoSupportedParameter_AllowedValues_Item as a ModelInfoSupportedParameterAllowedValues1
func (t ModelInfoSupportedParameter_AllowedValues_Item) AsModelInfoSupportedParameterAllowedValues1() (ModelInfoSupportedParameterAllowedValues1, error) {
	var body ModelInfoSupportedParameterAllowedValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterAllowedValues1 overwrites any union data inside the ModelInfoSupportedParameter_AllowedValues_Item as the provided ModelInfoSupportedParameterAllowedValues1
func (t *ModelInfoSupportedParameter_AllowedValues_Item) FromModelInfoSupportedParameterAllowedValues1(v ModelInfoSupportedParameterAllowedValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterAllowedValues1 performs a merge with any union data inside the ModelInfoSupportedParameter_AllowedValues_Item, using the provided ModelInfoSupportedParameterAllowedValues1
func (t *ModelInfoSupportedParameter_AllowedValues_Item) MergeModelInfoSupportedParameterAllowedValues1(v ModelInfoSupportedParameterAllowedValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelInfoSupportedParameter_AllowedValues_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelInfoSupportedParameter_AllowedValues_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModelInfoSupportedParameterDefault0 returns the union data inside the ModelInfoSupportedParameter_Default as a ModelInfoSupportedParameterDefault0
func (t ModelInfoSupportedParameter_Default) AsModelInfoSupportedParameterDefault0() (ModelInfoSupportedParameterDefault0, error) {
	var body ModelInfoSupportedParameterDefault0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterDefault0 overwrites any union data inside the ModelInfoSupportedParameter_Default as the provided ModelInfoSupportedParameterDefault0
func (t *ModelInfoSupportedParameter_Default) FromModelInfoSupportedParameterDefault0(v ModelInfoSupportedParameterDefault0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterDefault0 performs a merge with any union data inside the ModelInfoSupportedParameter_Default, using the provided ModelInfoSupportedParameterDefault0
func (t *ModelInfoSupportedParameter_Default) MergeModelInfoSupportedParameterDefault0(v ModelInfoSupportedParameterDefault0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelInfoSupportedParameterDefault1 returns the union data inside the ModelInfoSupportedParameter_Default as a ModelInfoSupportedParameterDefault1
func (t ModelInfoSupportedParameter_Default) AsModelInfoSupportedParameterDefault1() (ModelInfoSupportedParameterDefault1, error) {
	var body ModelInfoSupportedParameterDefault1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterDefault1 overwrites any union data inside the ModelInfoSupportedParameter_Default as the provided ModelInfoSupportedParameterDefault1
func (t *ModelInfoSupportedParameter_Default) FromModelInfoSupportedParameterDefault1(v ModelInfoSupportedParameterDefault1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterDefault1 performs a merge with any union data inside the ModelInfoSupportedParameter_Default, using the provided ModelInfoSupportedParameterDefault1
func (t *ModelInfoSupportedParameter_Default) MergeModelInfoSupportedParameterDefault1(v ModelInfoSupportedParameterDefault1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelInfoSupportedParameterDefault2 returns the union data inside the ModelInfoSupportedParameter_Default as a ModelInfoSupportedParameterDefault2
func (t ModelInfoSupportedParameter_Default) AsModelInfoSupportedParameterDefault2() (ModelInfoSupportedParameterDefault2, error) {
	var body ModelInfoSupportedParameterDefault2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterDefault2 overwrites any union data inside the ModelInfoSupportedParameter_Default as the provided ModelInfoSupportedParameterDefault2
func (t *ModelInfoSupportedParameter_Default) FromModelInfoSupportedParameterDefault2(v ModelInfoSupportedParameterDefault2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterDefault2 performs a merge with any union data inside the ModelInfoSupportedParameter_Default, using the provided ModelInfoSupportedParameterDefault2
func (t *ModelInfoSupportedParameter_Default) MergeModelInfoSupportedParameterDefault2(v ModelInfoSupportedParameterDefault2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsModelInfoSupportedParameterDefault3 returns the union data inside the ModelInfoSupportedParameter_Default as a ModelInfoSupportedParameterDefault3
func (t ModelInfoSupportedParameter_Default) AsModelInfoSupportedParameterDefault3() (ModelInfoSupportedParameterDefault3, error) {
	var body ModelInfoSupportedParameterDefault3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModelInfoSupportedParameterDefault3 overwrites any union data inside the ModelInfoSupportedParameter_Default as the provided ModelInfoSupportedParameterDefault3
func (t *ModelInfoSupportedParameter_Default) FromModelInfoSupportedParameterDefault3(v ModelInfoSupportedParameterDefault3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModelInfoSupportedParameterDefault3 performs a merge with any union data inside the ModelInfoSupportedParameter_Default, using the provided ModelInfoSupportedParameterDefault3
func (t *ModelInfoSupportedParameter_Default) MergeModelInfoSupportedParameterDefault3(v ModelInfoSupportedParameterDefault3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModelInfoSupportedParameter_Default) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModelInfoSupportedParameter_Default) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// EmbedWithBody request with any body
	EmbedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Embed(ctx context.Context, body EmbedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModel request
	GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RerankWithBody request with any body
	RerankWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Rerank(ctx context.Context, body RerankJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) EmbedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Embed(ctx context.Context, body EmbedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RerankWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRerankRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Rerank(ctx context.Context, body RerankJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRerankRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewEmbedRequest calls the generic Embed builder with application/json body
func NewEmbedRequest(server string, body EmbedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmbedRequestWithBody(server, "application/json", bodyReader)
}

// NewEmbedRequestWithBody generates requests for Embed with any type of body
func NewEmbedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string, params *ListModelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vector_type", runtime.ParamLocationQuery, *params.VectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelRequest generates requests for GetModel
func NewGetModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model_name", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRerankRequest calls the generic Rerank builder with application/json body
func NewRerankRequest(server string, body RerankJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRerankRequestWithBody(server, "application/json", bodyReader)
}

// NewRerankRequestWithBody generates requests for Rerank with any type of body
func NewRerankRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rerank")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// EmbedWithBodyWithResponse request with any body
	EmbedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbedResponse, error)

	EmbedWithResponse(ctx context.Context, body EmbedJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbedResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// GetModelWithResponse request
	GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error)

	// RerankWithBodyWithResponse request with any body
	RerankWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RerankResponse, error)

	RerankWithResponse(ctx context.Context, body RerankJSONRequestBody, reqEditors ...RequestEditorFn) (*RerankResponse, error)
}

type EmbedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmbeddingsList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EmbedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmbedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInfoList
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInfo
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RerankResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RerankResult
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RerankResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RerankResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EmbedWithBodyWithResponse request with arbitrary body returning *EmbedResponse
func (c *ClientWithResponses) EmbedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbedResponse, error) {
	rsp, err := c.EmbedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbedResponse(rsp)
}

func (c *ClientWithResponses) EmbedWithResponse(ctx context.Context, body EmbedJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbedResponse, error) {
	rsp, err := c.Embed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbedResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// GetModelWithResponse request returning *GetModelResponse
func (c *ClientWithResponses) GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error) {
	rsp, err := c.GetModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelResponse(rsp)
}

// RerankWithBodyWithResponse request with arbitrary body returning *RerankResponse
func (c *ClientWithResponses) RerankWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RerankResponse, error) {
	rsp, err := c.RerankWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRerankResponse(rsp)
}

func (c *ClientWithResponses) RerankWithResponse(ctx context.Context, body RerankJSONRequestBody, reqEditors ...RequestEditorFn) (*RerankResponse, error) {
	rsp, err := c.Rerank(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRerankResponse(rsp)
}

// ParseEmbedResponse parses an HTTP response from a EmbedWithResponse call
func ParseEmbedResponse(rsp *http.Response) (*EmbedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmbedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmbeddingsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInfoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetModelResponse parses an HTTP response from a GetModelWithResponse call
func ParseGetModelResponse(rsp *http.Response) (*GetModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRerankResponse parses an HTTP response from a RerankWithResponse call
func ParseRerankResponse(rsp *http.Response) (*RerankResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RerankResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RerankResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
